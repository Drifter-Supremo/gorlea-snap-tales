rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if the data being written is valid
    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasOnly(['displayName', 'email', 'photoURL', 'createdAt', 'lastLoginAt', 'preferences']) &&
             data.displayName is string &&
             data.email is string &&
             (data.photoURL == null || data.photoURL is string) &&
             data.createdAt is timestamp &&
             data.lastLoginAt is timestamp &&
             (data.preferences == null || (
               data.preferences.theme is string &&
               data.preferences.notifications is bool
             ));
    }

    // Helper function to check if the story data is valid
    function isValidStoryData() {
      let data = request.resource.data;
      return data.keys().hasOnly(['userId', 'title', 'content', 'imageURL', 'genre', 'createdAt', 'isPublic', 'likes', 'tags']) &&
             data.userId is string &&
             data.title is string &&
             data.content is string &&
             data.imageURL is string &&
             data.genre is string &&
             data.createdAt is timestamp &&
             data.isPublic is bool &&
             data.likes is number &&
             data.tags is list;
    }

    // Users collection rules
    match /users/{userId} {
      // Allow read if the user is authenticated and is the owner of the document
      allow read: if isOwner(userId);

      // Allow create if the user is authenticated, is the owner, and the data is valid
      allow create: if isOwner(userId) && isValidUserData();

      // Allow update if the user is authenticated, is the owner, and the data is valid
      allow update: if isOwner(userId) && isValidUserData();

      // Allow delete if the user is authenticated and is the owner
      allow delete: if isOwner(userId);

      // Notifications subcollection rules
      match /notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }

    // Stories collection rules
    match /stories/{storyId} {
      // Allow read for all authenticated users
      allow read: if isAuthenticated();

      // Allow create if the user is authenticated, is setting themselves as the owner, and the data is valid
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid && isValidStoryData();

      // Allow update if the user is the owner and the data is valid
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;

      // Allow delete if the user is the owner
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Favorites collection rules
    match /favorites/{favoriteId} {
      // Allow read if the user is authenticated
      allow get: if isAuthenticated();

      // Allow listing all favorites for authenticated users
      allow list: if isAuthenticated();

      // Allow create if the user is authenticated and is setting themselves as the owner
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;

      // Allow delete if the user is authenticated
      allow delete: if isAuthenticated();
    }
  }
}

rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the file
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if the file is an image
    function isImage() {
      return request.resource.contentType.matches('image/.*');
    }
    
    // Helper function to check if the file size is less than 5MB
    function isUnder5MB() {
      return request.resource.size < 5 * 1024 * 1024;
    }
    
    // User profile images
    match /users/{userId}/profile.{extension} {
      // Allow read for all authenticated users
      allow read: if isAuthenticated();
      
      // Allow write if the user is the owner, the file is an image, and under 5MB
      allow write: if isOwner(userId) && isImage() && isUnder5MB();
    }
    
    // Story images
    match /images/{imageId} {
      // Allow read for all users (public images)
      allow read: if true;
      
      // Allow create if the user is authenticated, the file is an image, and under 5MB
      allow create: if isAuthenticated() && isImage() && isUnder5MB();
      
      // Allow update and delete if the user is the owner
      // Note: In a real app, you would store the owner's UID in metadata or Firestore
      allow update, delete: if false; // Disallow updates and deletes for now
    }
    
    // Deny access to all other files
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
